import{e as t}from"./app.ccf5a8e7.js";import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";const a={},e=t(`<h1 id="core-plugins" tabindex="-1"><a class="header-anchor" href="#core-plugins" aria-hidden="true">#</a> Core plugins</h1><table><tr><td>name</td><td>default</td><td>description</td></tr><tr><td><a href="https://github.com/wbthomason/packer.nvim">wbthomason/packer.nvim</a></td><td>true</td><td>A use-package inspired plugin manager for Neovim. Uses native packages, supports Luarocks dependencies, written in Lua, allows for expressive config</td></tr><tr><td><a href="https://github.com/hrsh7th/nvim-cmp">hrsh7th/nvim-cmp</a></td><td>true</td><td>A completion plugin for neovim coded in Lua.</td></tr><tr><td><a href="https://github.com/hrsh7th/cmp-path">hrsh7th/cmp-path</a></td><td>true</td><td>nvim-cmp source for path</td></tr><tr><td><a href="https://github.com/rafamadriz/friendly-snippets">rafamadriz/friendly-snippets</a></td><td>true</td><td>Set of preconfigured snippets for different languages. </td></tr><tr><td><a href="https://github.com/hrsh7th/cmp-nvim-lsp">hrsh7th/cmp-nvim-lsp</a></td><td>true</td><td>nvim-cmp source for neovim builtin LSP client</td></tr><tr><td><a href="https://github.com/folke/lua-dev.nvim">folke/lua-dev.nvim</a></td><td>true</td><td>\u{1F4BB} Dev setup for init.lua and plugin development with full signature help, docs and completion for the nvim lua API.</td></tr><tr><td><a href="https://github.com/hrsh7th/cmp-buffer">hrsh7th/cmp-buffer</a></td><td>true</td><td>nvim-cmp source for buffer words</td></tr><tr><td><a href="https://github.com/tamago324/nlsp-settings.nvim">tamago324/nlsp-settings.nvim</a></td><td>true</td><td>A plugin for setting Neovim LSP with JSON files</td></tr><tr><td><a href="https://github.com/nvim-lua/plenary.nvim">nvim-lua/plenary.nvim</a></td><td>true</td><td>plenary: full; complete; entire; absolute; unqualified. All the lua functions I don&#39;t want to write twice.</td></tr><tr><td><a href="https://github.com/neovim/nvim-lspconfig">neovim/nvim-lspconfig</a></td><td>true</td><td>Quickstart configurations for the Nvim LSP client</td></tr><tr><td><a href="https://github.com/jose-elias-alvarez/null-ls.nvim">jose-elias-alvarez/null-ls.nvim</a></td><td>true</td><td>Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua.</td></tr><tr><td><a href="https://github.com/williamboman/nvim-lsp-installer">williamboman/nvim-lsp-installer</a></td><td>true</td><td>Companion plugin for nvim-lspconfig that allows you to seamlessly manage LSP servers locally with :LspInstall. With full Windows support!</td></tr><tr><td><a href="https://github.com/nvim-telescope/telescope.nvim">nvim-telescope/telescope.nvim</a></td><td>true</td><td>Find, Filter, Preview, Pick. All lua, all the time.</td></tr><tr><td><a href="https://github.com/saadparwaiz1/cmp_luasnip">saadparwaiz1/cmp_luasnip</a></td><td>true</td><td>luasnip completion source for nvim-cmp</td></tr><tr><td><a href="https://github.com/nvim-telescope/telescope-fzf-native.nvim">nvim-telescope/telescope-fzf-native.nvim</a></td><td>true</td><td>FZF sorter for telescope written in c</td></tr><tr><td><a href="https://github.com/nvim-lua/popup.nvim">nvim-lua/popup.nvim</a></td><td>true</td><td>[WIP] An implementation of the Popup API from vim in Neovim. Hope to upstream when complete</td></tr><tr><td><a href="https://github.com/antoinemadec/FixCursorHold.nvim">antoinemadec/FixCursorHold.nvim</a></td><td>true</td><td>Fix CursorHold Performance.</td></tr><tr><td><a href="https://github.com/Tastyep/structlog.nvim">Tastyep/structlog.nvim</a></td><td>true</td><td>Structured Logging for nvim, using Lua</td></tr><tr><td><a href="https://github.com/romgrk/barbar.nvim">romgrk/barbar.nvim</a></td><td>false</td><td>The neovim tabline plugin.</td></tr><tr><td><a href="https://github.com/rcarriga/nvim-notify">rcarriga/nvim-notify</a></td><td>true</td><td>A fancy, configurable, notification manager for NeoVim</td></tr><tr><td><a href="https://github.com/JoosepAlviste/nvim-ts-context-commentstring">JoosepAlviste/nvim-ts-context-commentstring</a></td><td>true</td><td>Neovim treesitter plugin for setting the commentstring based on the cursor location in a file.</td></tr><tr><td><a href="https://github.com/nvim-treesitter/nvim-treesitter">nvim-treesitter/nvim-treesitter</a></td><td>true</td><td>Nvim Treesitter configurations and abstraction layer</td></tr><tr><td><a href="https://github.com/mfussenegger/nvim-dap">mfussenegger/nvim-dap</a></td><td>false</td><td>Debug Adapter Protocol client implementation for Neovim (&gt;= 0.5)</td></tr><tr><td><a href="https://github.com/numToStr/Comment.nvim">numToStr/Comment.nvim</a></td><td>true</td><td>:brain: :muscle: // Smart and powerful comment plugin for neovim. Supports treesitter, dot repeat, left-right/up-down motions, hooks, and more</td></tr><tr><td><a href="https://github.com/ahmedkhalf/project.nvim">ahmedkhalf/project.nvim</a></td><td>true</td><td>The superior project management solution for neovim.</td></tr><tr><td><a href="https://github.com/akinsho/toggleterm.nvim">akinsho/toggleterm.nvim</a></td><td>true</td><td>A neovim lua plugin to help easily manage multiple terminal windows</td></tr><tr><td><a href="https://github.com/windwp/nvim-autopairs">windwp/nvim-autopairs</a></td><td>true</td><td>autopairs for neovim written by lua</td></tr><tr><td><a href="https://github.com/L3MON4D3/LuaSnip">L3MON4D3/LuaSnip</a></td><td>true</td><td>Snippet Engine for Neovim written in Lua.</td></tr><tr><td><a href="https://github.com/zeertzjq/which-key.nvim">zeertzjq/which-key.nvim</a></td><td>true</td><td>\u{1F4A5} Create key bindings that stick. WhichKey is a lua plugin for Neovim 0.5 that displays a popup with possible keybindings of the command you started typing.</td></tr><tr><td><a href="https://github.com/kyazdani42/nvim-web-devicons">kyazdani42/nvim-web-devicons</a></td><td>true</td><td>lua \`fork\` of vim-web-devicons for neovim</td></tr><tr><td><a href="https://github.com/kyazdani42/nvim-tree.lua">kyazdani42/nvim-tree.lua</a></td><td>true</td><td>A file explorer tree for neovim written in lua</td></tr><tr><td><a href="https://github.com/nvim-lualine/lualine.nvim">nvim-lualine/lualine.nvim</a></td><td>true</td><td>A blazing fast and easy to configure neovim statusline plugin written in pure lua.</td></tr><tr><td><a href="https://github.com/lewis6991/gitsigns.nvim">lewis6991/gitsigns.nvim</a></td><td>true</td><td>Git integration for buffers</td></tr><tr><td><a href="https://github.com/Pocco81/DAPInstall.nvim">Pocco81/DAPInstall.nvim</a></td><td>false</td><td>\u{1F986} A NeoVim plugin for managing several debuggers for Nvim-dap</td></tr><tr><td><a href="https://github.com/ChristianChiarulli/dashboard-nvim">ChristianChiarulli/dashboard-nvim</a></td><td>false</td><td>vim dashboard</td></tr></table><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code>lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>lualine<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token keyword">true</span>
lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>dap<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token keyword">true</span>
lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>dashboard<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token keyword">true</span>
lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>terminal<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token keyword">true</span>
lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>bufferline<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token comment">-- this is actually using romgrk/barbar.nvim</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Settings for core plugins are accessible through <code>lvim.builtin</code>. You can press <code>TAB</code> to get autocomplete suggestions to explore these settings.</p><p>If a plugin is lazy-loaded and you disable it, you need to let Packer know about it by running <code>:PackerSync</code>.</p><p>Example settings</p><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code>lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>cmp<span class="token punctuation">.</span>completion<span class="token punctuation">.</span>keyword_length <span class="token operator">=</span> <span class="token number">2</span>
lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>telescope<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>layout_config<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">0.95</span>
lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>telescope<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>layout_config<span class="token punctuation">.</span>preview_cutoff <span class="token operator">=</span> <span class="token number">75</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>To see which plugins are installed run <code>:PackerStatus</code></p>`,9);function s(i,r){return e}var d=n(a,[["render",s]]);export{d as default};
